package com.catglo.deliveryDatabase;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.regex.Pattern;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.SharedPreferences;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.preference.PreferenceManager;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import com.google.android.maps.GeoPoint;

public class AddressSuggestiorGoogle extends WebServiceLookup {
	private String bounds;
	float range;
	private LocationManager locationManager;
	private String bestProvider;
	private Location location;
	private double lat;
	private double lng;
	public AddressSuggestionCommitor commitor;
	
	public AddressSuggestiorGoogle(Context context,AddressSuggestionCommitor commitor){
		super();
		final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
		range = sharedPreferences.getFloat("dileveryRadius", 1);
		
		locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
    	Criteria criteria = new Criteria();
		bestProvider = locationManager.getBestProvider(criteria, false);			
		this.commitor = commitor;
	}

	@Override
	protected void handleJsonResponce(JSONObject jsonResponse) throws JSONException {
		GeoPoint[] addressLocations;
		String[] addressList;
		
		JSONArray results = jsonResponse.getJSONArray("results");
			
		addressList = new String[results.length()];
		addressLocations = new GeoPoint[results.length()];
		
		for (int index = 0; index < results.length(); index++){
			JSONObject a1=results.getJSONObject(index);
			String a2 = a1.getString("formatted_address");
			addressList[index]=a2;
			 
			GeoPoint g = null;
			try {
				JSONObject geometry = a1.getJSONObject("geometry");
				JSONObject location = geometry.getJSONObject("location");
				float lat = new Float(location.getString("lat"));
				float lng = new Float(location.getString("lng"));
				g = new GeoPoint((int)(lat*1000000),(int)(lng*1000000));
			} catch (NumberFormatException e){};
			addressLocations[index] = g;
		}
		commitor.commit(addressList,addressLocations);
	}
	
	@Override
	protected String getURL(String addressSoFar) throws UnsupportedEncodingException {
		String address = URLEncoder. encode(addressSoFar,"UTF-8");
		String retVal=null;
		
		try {
			location = locationManager.getLastKnownLocation(bestProvider);
			lat = location.getLatitude();
			lng = location.getLongitude(); 
			bounds = "&bounds="+(lat-range)+","+(lng-range)+URLEncoder.encode("|")+(lat+range)+","+(lng+range);
			retVal = "http://maps.googleapis.com/maps/api/geocode/json?address="+address+bounds+"&sensor=true";
		} catch (NullPointerException e){
			e.printStackTrace();
			retVal = "http://maps.googleapis.com/maps/api/geocode/json?address="+address+"&sensor=false";
		}
		return retVal;
	}
}
